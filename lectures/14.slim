---
layout: lecture
title: Object Model
---

section.center data-background="#000"
  h2.white Object Model

section.center
  p This lecture is a short one

section.center
  p But a really, really important one

section.center data-background="#000"
  h2.white Questions

section.center
  p What is a scope gate?

section.center
  p Which are the keywords that introduce scope gates?

section.center
  pre: code.ruby contenteditable="true"
    '
      class Object
        def define_singleton_method(name, method = nil, &block)
          class << self
            define_method(name, method, &block)
          end
        end
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      class Item < BaseModel
        attribute :price, :curency
        validate :price, :currency, presence: true

        class << self
          def none
            new(price: '0.00', currency: Currency::DEFAULT)
          end
        end

        private

        def convert_to_cents
          currency.to_base_unit(price)
        end
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      fancy_item = Item.new(price: '43.99', currency: Currency::EUD)

      def fancy_item.convert_to_cents
        super * 10 # Capitalism!
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      def feed(*meals)
        super
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      def feed(*meals)
        super()
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      def feed(*)
        super
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      o = Object.new

      def o.to_a
        [o]
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      o = Object.new

      class << o
        def to_a
          [o]
        end
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      result = class Foo
        self
      end

      Foo == result

section.center
  p What does define_method does?

section.center
  p What does instance_eval does?

section.center
  p What does class_eval does?

section.center
  p What's the difference?

section.center
  p What's an eigenclass

section.center
  img.inline src="/images/troll.png"

section.center data-background="#F00"
  h2.white Object Model

section
  h2 Class#superclass
  p Returns the superclass of class

section
  h2 Class#superclass
  p Returns nil on BasicObject

section
  h2 Class#inherited
  p Callback invoked whenever a subclass of the current class is created.

section.center
  pre: code.ruby contenteditable="true"
    '
      class Foo
        def self.inherited(subclass)
      end

      class Bar < Foo; end
      class Baz < Bar; end

section.center
  pre: code.ruby contenteditable="true"
    '
      New subclass: Bar
      New subclass: Baz

section
  h2 Object#extend
  p Includes a module into an object singleton class

section
  h2 Object#extended
  p Callback invoked whenever the receiver is extended in another module or class.

section.center
  pre: code.ruby contenteditable="true"
    '
      module A
        def self.extended(mod)
          puts self.to_s + "extended in " + mod.to_s
        end
      end

      module Enumerable
        extend A
      end
      # => prints "A extended in Enumerable"


section
  h2 Module#prepend
  p Includes a module before the includee in the ancestor chain

section
  h2 Module#<
  p Returns true if mod is a subclass of other.

section
  h2 Module#<
  p Returns nil if thereâ€™s no relationship between the two.

section.center
  pre: code.ruby contenteditable="true"
    '
      class B; end
      class A < B; end

      A < B #=> true
      A < Object #=> true

section.center
  pre: code.ruby contenteditable="true"
    '
      File.superclass          #=> IO
      IO.superclass            #=> Object
      Object.superclass        #=> BasicObject
      class Foo; end
      class Bar < Foo; end
      Bar.superclass           a=> Foo

section.center
  img.inline src="/images/objects.png"

section.center
  img.inline src="http://media4.giphy.com/media/9tEQ9zgHqGBNu/giphy.gif"

section.center
  img.inline src="/images/singletons.png"

section.center data-background="#000"
  p.white If an object has a singleton class, the method lookup happens on its ancestor chain

section.center data-background="#000"
  p.white The super class of the singleton class is the singleton class of the super class

section.center data-background="#000"
  p.white Write this one down

section.center data-background="#000"
  p.white Remember it at your sleep

section.center data-background="#000"
  p.white Ladies love it when you say it

section.center data-background="#000"
  p.white Geeks get impressed

section.center data-background="#000"
  p.white Huge reputation boost, guaranteed

section.center
  pre: code.ruby contenteditable="true"
    '
      class BaseModel
        class << self
          def attribute(name)
            define_internal_attribute(name)
          end

          def validate(*attrs, options = {})
            attrs.each do
              options.each do |name, options|
                attach_validator(name, options)
              end
            end
          end
        end
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      class Item < BaseModel
        attribute :price, :curency
        validate :price, :currency, presence: true
      end

section data-background="http://replygif.net/i/411.gif"
